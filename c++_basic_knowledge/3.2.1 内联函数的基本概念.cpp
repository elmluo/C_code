/*
C++ 提供了inline关键字，实现了真正的内嵌

特点:
	1. 内联函数声明时 inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求
	2. C++ 编译器直接将函数体插入在函数调用的地方
	3. 内联函数没有普通函数调用的额外开销(压栈、跳转、返回)
	4. 内联函数是一种特殊的函数，具有普通函数的特性(参数检查，返回类型等)
	5. 内联函数由 编译器处理， 直接将编译后的函数体插入调用的地方
		宏代码片段 由预处理处理， 进行简单的替换，没有任何编译过程
	6. C++ 中内敛编译的限制：
		不能存在任何形式的循环语句
		不能存在过多的条件判断语句
		函数体不能过于庞大
		不能对函数进行取地址的操作
		函数内联声明必须再调用语句之前
	7. 编译器对于内联函数的限制并不是绝对的，内联函数相当于普通函数的优势，只是省去了函数调动时压栈，跳转和返回的开销。因此，当函数体的执行开销远大于压栈，跳转和返回所用的开销时，那么内联将无意义。

 */
#include <iostream>
using namespace std;

inline void func(int a)
{
	a = 20;
	cout << a <<endl;
}

int main(int argc, char const *argv[])
{
	func(10);
	/*
		// 编译器将内联函数的函数体直接展开
	{
	 	a = 20;
	 	cout << a << endl;
	}
	*/ 
	return 0;
}
